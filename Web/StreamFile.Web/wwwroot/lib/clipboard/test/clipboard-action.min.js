/**
 * Minified by jsDelivr using Terser v5.3.5.
 * Original file: /npm/clipboard@2.0.8/test/clipboard-action.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import Emitter from"tiny-emitter";import ClipboardAction from"../src/clipboard-action";describe("ClipboardAction",(()=>{before((()=>{global.input=document.createElement("input"),global.input.setAttribute("id","input"),global.input.setAttribute("value","abc"),document.body.appendChild(global.input),global.paragraph=document.createElement("p"),global.paragraph.setAttribute("id","paragraph"),global.paragraph.textContent="abc",document.body.appendChild(global.paragraph)})),after((()=>{document.body.innerHTML=""})),describe("#resolveOptions",(()=>{it("should set base properties",(()=>{let e=new ClipboardAction({emitter:new Emitter,container:document.body,text:"foo"});assert.property(e,"action"),assert.property(e,"container"),assert.property(e,"emitter"),assert.property(e,"target"),assert.property(e,"text"),assert.property(e,"trigger"),assert.property(e,"selectedText")}))})),describe("#initSelection",(()=>{it("should set the position right style property",(e=>{document.documentElement.setAttribute("dir","rtl");const t=new ClipboardAction({emitter:new Emitter,container:document.body,text:"foo"}).createFakeElement();assert.equal(t.style.right,"-9999px"),e()}))})),describe("#set action",(()=>{it('should throw an error since "action" is invalid',(e=>{try{new ClipboardAction({text:"foo",action:"paste"})}catch(t){assert.equal(t.message,'Invalid "action" value, use either "copy" or "cut"'),e()}}))})),describe("#set target",(()=>{it('should throw an error since "target" do not match any element',(e=>{try{new ClipboardAction({target:document.querySelector("#foo")})}catch(t){assert.equal(t.message,'Invalid "target" value, use a valid Element'),e()}}))})),describe("#selectText",(()=>{it("should create a fake element and select its value",(()=>{let e=new ClipboardAction({emitter:new Emitter,container:document.body,text:"blah"});const t=e.createFakeElement();assert.equal(e.selectedText,t.value)}))})),describe("#removeFake",(()=>{it("should remove a temporary fake element",(()=>{let e=new ClipboardAction({emitter:new Emitter,container:document.body,text:"blah"});e.removeFake(),assert.equal(e.fakeElem,null)}))})),describe("#selectTarget",(()=>{it("should select text from editable element",(()=>{let e=new ClipboardAction({emitter:new Emitter,container:document.body,target:document.querySelector("#input")});assert.equal(e.selectedText,e.target.value)})),it("should select text from non-editable element",(()=>{let e=new ClipboardAction({emitter:new Emitter,container:document.body,target:document.querySelector("#paragraph")});assert.equal(e.selectedText,e.target.textContent)}))})),describe("#copyText",(()=>{before((()=>{global.stub=sinon.stub(document,"execCommand")})),after((()=>{global.stub.restore()})),it("should fire a success event on browsers that support copy command",(e=>{global.stub.returns(!0);let t=new Emitter;t.on("success",(()=>{e()}));new ClipboardAction({emitter:t,target:document.querySelector("#input")})})),it("should fire an error event on browsers that support copy command",(e=>{global.stub.returns(!1);let t=new Emitter;t.on("error",(()=>{e()}));new ClipboardAction({emitter:t,target:document.querySelector("#input")})}))})),describe("#handleResult",(()=>{it("should fire a success event with certain properties",(e=>{let t=new ClipboardAction({emitter:new Emitter,container:document.body,target:document.querySelector("#input")});t.emitter.on("success",(t=>{assert.property(t,"action"),assert.property(t,"text"),assert.property(t,"trigger"),assert.property(t,"clearSelection"),e()})),t.handleResult(!0)})),it("should fire a error event with certain properties",(e=>{let t=new ClipboardAction({emitter:new Emitter,container:document.body,target:document.querySelector("#input")});t.emitter.on("error",(t=>{assert.property(t,"action"),assert.property(t,"trigger"),assert.property(t,"clearSelection"),e()})),t.handleResult(!1)}))})),describe("#clearSelection",(()=>{it("should remove focus from target and text selection",(()=>{new ClipboardAction({emitter:new Emitter,container:document.body,target:document.querySelector("#input")}).clearSelection();let e=document.activeElement,t=window.getSelection().toString();assert.equal(e,document.body),assert.equal(t,"")}))})),describe("#destroy",(()=>{it("should destroy an existing fake element",(()=>{let e=new ClipboardAction({emitter:new Emitter,container:document.body,text:"blah"});e.selectFake(),e.destroy(),assert.equal(e.fakeElem,null)}))}))}));
//# sourceMappingURL=/sm/6d5b2bee6436490ed5ad0614e6abf78c7b6d90ac878ff571cef5448e196bd60d.map