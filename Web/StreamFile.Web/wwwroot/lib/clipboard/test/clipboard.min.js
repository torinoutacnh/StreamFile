/**
 * Minified by jsDelivr using Terser v5.3.5.
 * Original file: /npm/clipboard@2.0.8/test/clipboard.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import Clipboard from"../src/clipboard";import ClipboardAction from"../src/clipboard-action";describe("Clipboard",(()=>{before((()=>{global.button=document.createElement("button"),global.button.setAttribute("class","btn"),global.button.setAttribute("data-clipboard-text","foo"),document.body.appendChild(global.button),global.span=document.createElement("span"),global.span.innerHTML="bar",global.button.appendChild(span),global.event={target:global.button,currentTarget:global.button}})),after((()=>{document.body.innerHTML=""})),describe("#resolveOptions",(()=>{before((()=>{global.fn=()=>{}})),it("should set action as a function",(()=>{let t=new Clipboard(".btn",{action:global.fn});assert.equal(global.fn,t.action)})),it("should set target as a function",(()=>{let t=new Clipboard(".btn",{target:global.fn});assert.equal(global.fn,t.target)})),it("should set text as a function",(()=>{let t=new Clipboard(".btn",{text:global.fn});assert.equal(global.fn,t.text)})),it("should set container as an object",(()=>{let t=new Clipboard(".btn",{container:document.body});assert.equal(document.body,t.container)})),it("should set container as body by default",(()=>{let t=new Clipboard(".btn");assert.equal(document.body,t.container)}))})),describe("#listenClick",(()=>{it("should add a click event listener to the passed selector",(()=>{let t=new Clipboard(".btn");assert.isObject(t.listener)}))})),describe("#onClick",(()=>{it("should create a new instance of ClipboardAction",(()=>{let t=new Clipboard(".btn");t.onClick(global.event),assert.instanceOf(t.clipboardAction,ClipboardAction)})),it("should use an event's currentTarget when not equal to target",(()=>{let t=new Clipboard(".btn"),e={target:global.span,currentTarget:global.button};t.onClick(e),assert.instanceOf(t.clipboardAction,ClipboardAction)})),it("should throw an exception when target is invalid",(t=>{try{new Clipboard(".btn",{target:()=>null}).onClick(global.event)}catch(e){assert.equal(e.message,'Invalid "target" value, use a valid Element'),t()}}))})),describe("#static isSupported",(()=>{it("should return the support of the given action",(()=>{assert.equal(Clipboard.isSupported("copy"),!0),assert.equal(Clipboard.isSupported("cut"),!0)})),it("should return the support of the cut and copy actions",(()=>{assert.equal(Clipboard.isSupported(),!0)}))})),describe("#destroy",(()=>{it("should destroy an existing instance of ClipboardAction",(()=>{let t=new Clipboard(".btn");t.onClick(global.event),t.destroy(),assert.equal(t.clipboardAction,null)}))}))}));
//# sourceMappingURL=/sm/895375b591430767a78789b56a6e7670baf2cbb96e4a3d38b785503659065eeb.map